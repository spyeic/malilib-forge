plugins {
	id 'dev.architectury.loom' version '0.11.0-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

ext.configFile = file "build.properties"

configFile.withReader {
	def prop = new Properties()
	prop.load(it)
	project.ext.config = new ConfigSlurper().parse prop
}


loom {
	// use this if you are using the official mojang mappings
	// and want loom to stop warning you about their license
	silentMojangMappingsLicense()

	// since loom 0.10, you are **required** to use the
	// "forge" block to configure forge-specific features,
	// such as the mixinConfigs array or datagen
	forge {
		// specify the mixin configs used in this mod
		// this will be added to the jar manifest as well!
		mixinConfigs = [
				"mixins.malilib.json"
		]

		// missing access transformers?
		// don't worry, you can still use them!
		// note that your AT *MUST* be located at
		// src/main/resources/META-INF/accesstransformer.cfg
		// to work as there is currently no config option to change this.
		// also, any names used in your access transformer will need to be
		// in SRG mapped ("func_" / "field_" with MCP class names) to work!
		// (both of these things may be subject to change in the future)

		// this will create a data generator configuration
		// that you can use to automatically generate assets and data
		// using architectury loom. Note that this currently *only* works
		// for forge projects made with architectury loom!
		dataGen {
			mod config.mod_id
		}
	}

	// This allows you to modify your launch configurations,
	// for example to add custom arguments. In this case, we want
	// the data generator to check our resources directory for
	// existing files. (see Forge's ExistingFileHelper for more info)
	launches {
		data {
			arg "--existing", file("src/main/resources").absolutePath
		}
	}
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${config.minecraft_version}"
//	mappings loom.officialMojangMappings()
	mappings "net.fabricmc:yarn:${config.mappings_version}:v2"
	implementation "com.google.code.findbugs:jsr305:3.0.2"
	// your forge dependency, this is **required** when using Forge Loom in forge mode!
	forge "net.minecraftforge:forge:${project.forge_version}"

	// additional dependencies can be specified using loom's regular format
	// specifying a "mod" dependency (like modImplementation or modApi)
	// will cause loom to remap the file to your specified mappings

	// in this example, we'll be adding JEI as a dependency
	// according to their developer example on GitHub
	// see: https://github.com/mezz/JustEnoughItems/wiki/Getting-Started
	// compile against the JEI API but do not include it at runtime
	// don't worry about loom "not finding a forge mod" here,
	// JEI's api just doesn't have any class with an @Mod annotation
	// modCompileOnly "mezz.jei:jei-1.18.2:${jei_version}:api"
	// at runtime, use the full JEI jar
	// modRuntimeOnly "mezz.jei:jei-1.18.2:${jei_version}"
}

group = config.group + "." + config.mod_id
archivesBaseName = config.mod_file_name + '-' + config.minecraft_version_out
version = config.mod_version

if (version.endsWith('-dev')) {
	version += "." + new Date().format('yyyyMMdd.HHmmss')
}

processResources {
	// Exclude the GIMP image files
	exclude '**/*.xcf'
	exclude '**/xcf'

	// this will ensure that this task is redone when the versions change.
	//inputs.property "minecraft_version", project.config.minecraft_version

	inputs.property "mod_version", config.mod_version

	filesMatching("META-INF/mods.toml") {
		expand "mod_version": config.mod_version
	}
}

tasks.withType(JavaCompile) {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

tasks.publish.dependsOn build
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId project.archivesBaseName

			// add all the jars that should be included when publishing to maven
			//artifact(jar)             { builtBy remapJar }
			from components.java
		}
	}

	repositories {
		maven {
			url "$projectDir/../../CommonMaven"
		}
	}
}
